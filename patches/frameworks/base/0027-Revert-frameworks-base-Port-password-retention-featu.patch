From a2c201af8850cbd1bc49df570bdff978882b1ef6 Mon Sep 17 00:00:00 2001
From: Jackeagle <jackeagle102@gmail.com>
Date: Thu, 25 Apr 2019 05:34:18 +0200
Subject: [PATCH 27/28] Revert "frameworks: base: Port password retention
 feature"

This reverts commit 90fce44de1101a925c62fafda8d6e5b3c8663ad4.
---
 .../internal/widget/ILockSettings.aidl        |  2 -
 .../internal/widget/LockPatternUtils.java     | 11 -----
 .../keyguard/KeyguardAbsKeyInputView.java     |  1 -
 .../android/keyguard/KeyguardPatternView.java |  1 -
 .../android/server/StorageManagerService.java | 17 +------
 .../locksettings/LockSettingsService.java     | 49 +------------------
 6 files changed, 2 insertions(+), 79 deletions(-)

diff --git a/core/java/com/android/internal/widget/ILockSettings.aidl b/core/java/com/android/internal/widget/ILockSettings.aidl
index 2f504c8ea02..3f218554037 100644
--- a/core/java/com/android/internal/widget/ILockSettings.aidl
+++ b/core/java/com/android/internal/widget/ILockSettings.aidl
@@ -80,6 +80,4 @@ interface ILockSettings {
             in byte[] recoveryKeyBlob,
             in List<WrappedApplicationKey> applicationKeys);
     void closeSession(in String sessionId);
-    void sanitizePassword();
-    String getPassword();
 }
diff --git a/core/java/com/android/internal/widget/LockPatternUtils.java b/core/java/com/android/internal/widget/LockPatternUtils.java
index bf780c1a80e..60606627949 100644
--- a/core/java/com/android/internal/widget/LockPatternUtils.java
+++ b/core/java/com/android/internal/widget/LockPatternUtils.java
@@ -740,17 +740,6 @@ public class LockPatternUtils {
         onAfterChangingPassword(userId);
     }
 
-    /**
-     * clears stored password.
-     */
-    public void sanitizePassword() {
-        try {
-            getLockSettings().sanitizePassword();
-        } catch (RemoteException re) {
-            Log.e(TAG, "Couldn't sanitize password" + re);
-        }
-    }
-
     private void updateCryptoUserInfo(int userId) {
         if (userId != UserHandle.USER_SYSTEM) {
             return;
diff --git a/packages/SystemUI/src/com/android/keyguard/KeyguardAbsKeyInputView.java b/packages/SystemUI/src/com/android/keyguard/KeyguardAbsKeyInputView.java
index c3119793eaf..48b41345675 100644
--- a/packages/SystemUI/src/com/android/keyguard/KeyguardAbsKeyInputView.java
+++ b/packages/SystemUI/src/com/android/keyguard/KeyguardAbsKeyInputView.java
@@ -187,7 +187,6 @@ public abstract class KeyguardAbsKeyInputView extends LinearLayout
             boolean isValidPassword) {
         boolean dismissKeyguard = KeyguardUpdateMonitor.getCurrentUser() == userId;
         if (matched) {
-            mLockPatternUtils.sanitizePassword();
             mCallback.reportUnlockAttempt(userId, true, 0);
             if (dismissKeyguard) {
                 mDismissing = true;
diff --git a/packages/SystemUI/src/com/android/keyguard/KeyguardPatternView.java b/packages/SystemUI/src/com/android/keyguard/KeyguardPatternView.java
index 3ae15b6500b..cc56a8a3599 100644
--- a/packages/SystemUI/src/com/android/keyguard/KeyguardPatternView.java
+++ b/packages/SystemUI/src/com/android/keyguard/KeyguardPatternView.java
@@ -310,7 +310,6 @@ public class KeyguardPatternView extends LinearLayout implements KeyguardSecurit
                 boolean isValidPattern) {
             boolean dismissKeyguard = KeyguardUpdateMonitor.getCurrentUser() == userId;
             if (matched) {
-                mLockPatternUtils.sanitizePassword();
                 mCallback.reportUnlockAttempt(userId, true, 0);
                 if (dismissKeyguard) {
                     mLockPatternView.setDisplayMode(LockPatternView.DisplayMode.Correct);
diff --git a/services/core/java/com/android/server/StorageManagerService.java b/services/core/java/com/android/server/StorageManagerService.java
index 7a726ce802c..d979ede7367 100644
--- a/services/core/java/com/android/server/StorageManagerService.java
+++ b/services/core/java/com/android/server/StorageManagerService.java
@@ -126,7 +126,6 @@ import com.android.internal.util.Preconditions;
 import com.android.internal.widget.LockPatternUtils;
 import com.android.server.pm.PackageManagerService;
 import com.android.server.storage.AppFuseBridge;
-import com.android.internal.widget.ILockSettings;
 
 import libcore.io.IoUtils;
 import libcore.util.EmptyArray;
@@ -2322,22 +2321,8 @@ class StorageManagerService extends IStorageManager.Stub
             Slog.i(TAG, "changing encryption password...");
         }
 
-        ILockSettings lockSettings = ILockSettings.Stub.asInterface(
-                        ServiceManager.getService("lock_settings"));
-        String currentPassword="default_password";
         try {
-            currentPassword = lockSettings.getPassword();
-        } catch (Exception e) {
-            Slog.wtf(TAG, "Couldn't get password" + e);
-        }
-
-        try {
-            mVold.fdeChangePassword(type, currentPassword, password);
-            try {
-                lockSettings.sanitizePassword();
-            } catch (Exception e) {
-                Slog.wtf(TAG, "Couldn't sanitize password" + e);
-            }
+            mVold.fdeChangePassword(type, password);
             return 0;
         } catch (Exception e) {
             Slog.wtf(TAG, e);
diff --git a/services/core/java/com/android/server/locksettings/LockSettingsService.java b/services/core/java/com/android/server/locksettings/LockSettingsService.java
index faf5a09e91b..5075b36fd62 100644
--- a/services/core/java/com/android/server/locksettings/LockSettingsService.java
+++ b/services/core/java/com/android/server/locksettings/LockSettingsService.java
@@ -164,7 +164,6 @@ public class LockSettingsService extends ILockSettings.Stub {
     // Order of holding lock: mSeparateChallengeLock -> mSpManager -> this
     // Do not call into ActivityManager while holding mSpManager lock.
     private final Object mSeparateChallengeLock = new Object();
-    private static final String DEFAULT_PASSWORD = "default_password";
 
     private final DeviceProvisionedObserver mDeviceProvisionedObserver =
             new DeviceProvisionedObserver();
@@ -185,7 +184,6 @@ public class LockSettingsService extends ILockSettings.Stub {
     private final SyntheticPasswordManager mSpManager;
 
     private final KeyStore mKeyStore;
-    private static String mSavePassword = DEFAULT_PASSWORD;
 
     private final RecoverableKeyStoreManager mRecoverableKeyStoreManager;
 
@@ -1099,45 +1097,6 @@ public class LockSettingsService extends ILockSettings.Stub {
         return mStorage.hasCredential(userId);
     }
 
-    public void retainPassword(String password) {
-        if (LockPatternUtils.isDeviceEncryptionEnabled()) {
-            if (password != null)
-                mSavePassword = password;
-            else
-                mSavePassword = DEFAULT_PASSWORD;
-        }
-    }
-
-    public void sanitizePassword() {
-        if (LockPatternUtils.isDeviceEncryptionEnabled()) {
-            mSavePassword = DEFAULT_PASSWORD;
-        }
-    }
-
-    private boolean checkCryptKeeperPermissions() {
-        boolean permission_err = false;
-        try {
-            mContext.enforceCallingOrSelfPermission(
-                       android.Manifest.permission.CRYPT_KEEPER,
-                       "no permission to get the password");
-        } catch (SecurityException e) {
-            permission_err = true;
-        }
-        return permission_err;
-    }
-
-    public String getPassword() {
-       /** if calling process does't have crypt keeper or admin permissions,
-         * throw the exception.
-         */
-       if (checkCryptKeeperPermissions())
-            mContext.enforceCallingOrSelfPermission(
-                    android.Manifest.permission.MANAGE_DEVICE_ADMINS,
-                    "no crypt_keeper or admin permission to get the password");
-
-       return mSavePassword;
-    }
-
     private void setKeystorePassword(String password, int userHandle) {
         final KeyStore ks = KeyStore.getInstance();
         ks.onUserPasswordChanged(userHandle, password);
@@ -1656,13 +1615,7 @@ public class LockSettingsService extends ILockSettings.Stub {
     public VerifyCredentialResponse checkCredential(String credential, int type, int userId,
             ICheckCredentialProgressCallback progressCallback) throws RemoteException {
         checkPasswordReadPermission(userId);
-        VerifyCredentialResponse response = doVerifyCredential(credential, type,
-                                        false, 0, userId, progressCallback);
-        if ((response.getResponseCode() == VerifyCredentialResponse.RESPONSE_OK) &&
-                                           (userId == UserHandle.USER_OWNER)) {
-                retainPassword(credential);
-        }
-        return response;
+        return doVerifyCredential(credential, type, false, 0, userId, progressCallback);
     }
 
     @Override
-- 
2.21.0

